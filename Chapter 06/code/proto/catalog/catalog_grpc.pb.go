// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: catalog/catalog.proto

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	GetProduct(ctx context.Context, in *ProductSpec, opts ...grpc.CallOption) (*Product, error)
	ProductList(ctx context.Context, in *Category, opts ...grpc.CallOption) (Catalog_ProductListClient, error)
	RecordProduct(ctx context.Context, opts ...grpc.CallOption) (Catalog_RecordProductClient, error)
	ProductChat(ctx context.Context, opts ...grpc.CallOption) (Catalog_ProductChatClient, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetProduct(ctx context.Context, in *ProductSpec, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/catalog.Catalog/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ProductList(ctx context.Context, in *Category, opts ...grpc.CallOption) (Catalog_ProductListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Catalog_ServiceDesc.Streams[0], "/catalog.Catalog/ProductList", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogProductListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Catalog_ProductListClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type catalogProductListClient struct {
	grpc.ClientStream
}

func (x *catalogProductListClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogClient) RecordProduct(ctx context.Context, opts ...grpc.CallOption) (Catalog_RecordProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &Catalog_ServiceDesc.Streams[1], "/catalog.Catalog/RecordProduct", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogRecordProductClient{stream}
	return x, nil
}

type Catalog_RecordProductClient interface {
	Send(*ProductSpec) error
	CloseAndRecv() (*Product, error)
	grpc.ClientStream
}

type catalogRecordProductClient struct {
	grpc.ClientStream
}

func (x *catalogRecordProductClient) Send(m *ProductSpec) error {
	return x.ClientStream.SendMsg(m)
}

func (x *catalogRecordProductClient) CloseAndRecv() (*Product, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogClient) ProductChat(ctx context.Context, opts ...grpc.CallOption) (Catalog_ProductChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Catalog_ServiceDesc.Streams[2], "/catalog.Catalog/ProductChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogProductChatClient{stream}
	return x, nil
}

type Catalog_ProductChatClient interface {
	Send(*ProductSpecNote) error
	Recv() (*ProductSpecNote, error)
	grpc.ClientStream
}

type catalogProductChatClient struct {
	grpc.ClientStream
}

func (x *catalogProductChatClient) Send(m *ProductSpecNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *catalogProductChatClient) Recv() (*ProductSpecNote, error) {
	m := new(ProductSpecNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	GetProduct(context.Context, *ProductSpec) (*Product, error)
	ProductList(*Category, Catalog_ProductListServer) error
	RecordProduct(Catalog_RecordProductServer) error
	ProductChat(Catalog_ProductChatServer) error
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GetProduct(context.Context, *ProductSpec) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedCatalogServer) ProductList(*Category, Catalog_ProductListServer) error {
	return status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedCatalogServer) RecordProduct(Catalog_RecordProductServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordProduct not implemented")
}
func (UnimplementedCatalogServer) ProductChat(Catalog_ProductChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ProductChat not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.Catalog/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetProduct(ctx, req.(*ProductSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ProductList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Category)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServer).ProductList(m, &catalogProductListServer{stream})
}

type Catalog_ProductListServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type catalogProductListServer struct {
	grpc.ServerStream
}

func (x *catalogProductListServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _Catalog_RecordProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatalogServer).RecordProduct(&catalogRecordProductServer{stream})
}

type Catalog_RecordProductServer interface {
	SendAndClose(*Product) error
	Recv() (*ProductSpec, error)
	grpc.ServerStream
}

type catalogRecordProductServer struct {
	grpc.ServerStream
}

func (x *catalogRecordProductServer) SendAndClose(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func (x *catalogRecordProductServer) Recv() (*ProductSpec, error) {
	m := new(ProductSpec)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Catalog_ProductChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatalogServer).ProductChat(&catalogProductChatServer{stream})
}

type Catalog_ProductChatServer interface {
	Send(*ProductSpecNote) error
	Recv() (*ProductSpecNote, error)
	grpc.ServerStream
}

type catalogProductChatServer struct {
	grpc.ServerStream
}

func (x *catalogProductChatServer) Send(m *ProductSpecNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *catalogProductChatServer) Recv() (*ProductSpecNote, error) {
	m := new(ProductSpecNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _Catalog_GetProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProductList",
			Handler:       _Catalog_ProductList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordProduct",
			Handler:       _Catalog_RecordProduct_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProductChat",
			Handler:       _Catalog_ProductChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "catalog/catalog.proto",
}
